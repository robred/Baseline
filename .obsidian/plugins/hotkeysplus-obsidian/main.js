'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var HotkeysPlus = /** @class */ (function (_super) {
    __extends(HotkeysPlus, _super);
    function HotkeysPlus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HotkeysPlus.prototype.onInit = function () { };
    HotkeysPlus.prototype.onload = function () {
        var _this = this;
        console.log("Loading Hotkeys++ plugin");
        this.addCommand({
            id: "better-toggle-todo",
            name: "Toggle to-do lists",
            callback: function () { return _this.toggleTodos(); },
            hotkeys: [
                {
                    modifiers: ["Mod"],
                    key: "m",
                },
            ],
        });
        this.addCommand({
            id: "toggle-bullet-number",
            name: "Toggle line to bulleted or numbered lists",
            callback: function () { return _this.toggleLists(); },
            hotkeys: [
                {
                    modifiers: ["Mod", "Shift"],
                    key: "m",
                },
            ],
        });
        this.addCommand({
            id: "toggle-block-quote",
            name: "Toggle line to block quote",
            callback: function () { return _this.toggleBlockQuote(); },
            hotkeys: [
                {
                    modifiers: ["Mod"],
                    key: "<",
                },
            ],
        });
        this.addCommand({
            id: "toggle-embed",
            name: "Toggle line to embed internal links",
            callback: function () { return _this.toggleEmbed(); },
            hotkeys: [
                {
                    modifiers: ["Mod", "Shift"],
                    key: "1",
                },
            ],
        });
    };
    HotkeysPlus.prototype.onunload = function () {
        console.log("Unloading Hotkeys++ plugin");
    };
    HotkeysPlus.prototype.getSelectedText = function (editor) {
        if (editor.somethingSelected()) {
            // Toggle to-dos under the selection
            var cursorStart = editor.getCursor(true);
            var cursorEnd = editor.getCursor(false);
            var content = editor.getRange({ line: cursorStart.line, ch: 0 }, { line: cursorEnd.line, ch: editor.getLine(cursorEnd.line).length });
            return {
                start: { line: cursorStart.line, ch: 0 },
                end: {
                    line: cursorEnd.line,
                    ch: editor.getLine(cursorEnd.line).length,
                },
                content: content,
            };
        }
        else {
            // Toggle the todo in the line
            var lineNr = editor.getCursor().line;
            var contents = editor.getDoc().getLine(lineNr);
            var cursorStart = {
                line: lineNr,
                ch: 0,
            };
            var cursorEnd = {
                line: lineNr,
                ch: contents.length,
            };
            var content = editor.getRange(cursorStart, cursorEnd);
            return { start: cursorStart, end: cursorEnd, content: content };
        }
    };
    HotkeysPlus.prototype.toggleElement = function (re, subst) {
        var activeLeaf = this.app.workspace.activeLeaf;
        var editor = activeLeaf.view.sourceMode.cmEditor;
        var selection = editor.somethingSelected();
        var selectedText = this.getSelectedText(editor);
        var newString = selectedText.content.replace(re, subst);
        editor.replaceRange(newString, selectedText.start, selectedText.end);
        // Keep cursor in the same place
        if (selection) {
            editor.setSelection(selectedText.start, {
                line: selectedText.end.line,
                ch: editor.getLine(selectedText.end.line).length,
            });
        }
    };
    HotkeysPlus.prototype.toggleTodos = function () {
        var re = /-\s\[ \]\s|-\s\[x\]\s|\*\s|-\s|\d+\.\s|^/gim;
        return this.toggleElement(re, this.replaceTodoElement);
    };
    HotkeysPlus.prototype.toggleLists = function () {
        var re = /-\s\[ \]\s|-\s\[x\]\s|\*\s|-\s|\d+\.\s|^/gim;
        return this.toggleElement(re, this.replaceListElement);
    };
    HotkeysPlus.prototype.toggleBlockQuote = function () {
        var re = />\s|^/gim;
        return this.toggleElement(re, this.replaceBlockQuote);
    };
    HotkeysPlus.prototype.toggleEmbed = function () {
        var re = /\S*\[\[/gim;
        return this.toggleElement(re, this.replaceEmbed);
    };
    HotkeysPlus.prototype.replaceListElement = function (startText) {
        if (startText === "- ") {
            return "1. ";
        }
        else if (startText === "") {
            return "- ";
        }
        else if (startText === "1. ") {
            return "";
        }
        else {
            return "- ";
        }
    };
    HotkeysPlus.prototype.replaceBlockQuote = function (startText) {
        if (startText === "> ") {
            return "";
        }
        else if (startText === "") {
            return "> ";
        }
        else {
            return "> ";
        }
    };
    HotkeysPlus.prototype.replaceEmbed = function (startText) {
        if (startText === "![[") {
            return "[[";
        }
        else if (startText === "[[") {
            return "![[";
        }
        else {
            return "";
        }
    };
    HotkeysPlus.prototype.replaceTodoElement = function (startText) {
        if (startText === "- [ ] ") {
            return "- [x] ";
        }
        else if (startText === "- [x] ") {
            return "- ";
        }
        else {
            return "- [ ] ";
        }
    };
    return HotkeysPlus;
}(obsidian.Plugin));

module.exports = HotkeysPlus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
